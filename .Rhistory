library(rJava)
path.package("rJava")
# Set fixed random seed for consistent colors
library(circlize)
# Load data files
Test_purchase_matrix <- read.csv("~/My Box Files/Prestige/Adhoc Analysis/Grey market/Test_purchase_matrix.csv", row.names=1)
mat <- as.matrix(Test_purchase_matrix)
# Set fixed random seed for consistent colors
set.seed(7355608)
# Create chord diagram with no sector labels for now
# col_mat = rand_color(length(mat), transparency = 0.5)
# dim(col_mat) = dim(mat) # to make sure it is a matrix
chordDiagram(mat, directional = TRUE, direction.type = "diffHeight",diffHeight= -0.04,annotationTrack = "grid", preAllocateTracks = list(track.height = 0.3))
# Customize sector labels
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
xplot = get.cell.meta.data("xplot")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
# Show country name if >3deg
if(abs(xplot[2] - xplot[1]) > 3) {
circos.text(mean(xlim), ylim[1], sector.name, facing = "clockwise",
niceFacing = TRUE,cex = 0.7, adj = c(0, 0.5))
} else if(abs(xplot[2] - xplot[1]) < 3 && abs(xplot[2] - xplot[1]) > 1) {
circos.text(mean(xlim), ylim[1], sector.name, facing = "clockwise",
niceFacing = TRUE,cex = 0.55, adj = c(0, 0.5))
} else {
circos.text(mean(xlim), ylim[1], sector.name, facing = "clockwise",
niceFacing = TRUE,col = "#00000000", adj = c(0, 0.5))
}
}, bg.border = NA)
ggsave("Network.png",width=5, height=5)
install.packages("ggsave")
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R')
?circos
?circlize
?chordDiagram
py <- plotly()
library(plotly)
py <- plotly()
response <- py$plotly(trace0, trace1, kwargs=list(filename="basic-line", fileopt="overwrite"))
objects
objects()
str(Test_purchase_matrix)
summary(Test_purchase_matrix)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
x*p
sum(x*p)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
?lm
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
?coef
lm(data=x, weights=w)
mean(x*w)
x*w
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
coef(lm(y ~ x)))
coef(lm(y ~ x))
?lm
coef(lm(y ~ x - 1))
data(mtcars)
colnames(mtcars)
?mtcars
coef(lm(mpg ~ wt))
coef(lm(mpg ~ wt, data=mtcars))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x - mean(x))/std(x)
(x - mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
coef(lm(y ~ x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
?nls
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
lm(x ~ x)
y<- c(0.573,0.8,0.36,0.44)
x
sum((x-0.573)^2)
sum((x-0.8)^2)
sum((x-0.36)^2)
sum((x-0.44)^2)
file.edit('~/.Rprofile')
sessionInfo()
getwd()
setwd("~/My Box Files/DataSciTraining/Repos/RepData_PeerAssessment2")
# install required R.utils package to uncompress .bz2 file
if (!"R.utils" %in% installed.packages()) install.packages("R.utils")
# load needed libraries
library(R.utils)
library(dplyr)
library(ggplot2)
```
```{r}
# Download and unzip data
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
if(!file.exists("data/Stormdata.csv")) {
download.file(url,destfile ="data/Stormdata.csv.bz2",method="internal")
bunzip2("data/Stormdata.csv.bz2",destname="data/Stormdata.csv",overwrite=TRUE)
}
# Load data and transform to data.table
if(!exists("Stormdata"))
Stormdata <- read.csv("data/Stormdata.csv", header=TRUE, row.names=NULL,
stringsAsFactors=FALSE, na.strings = "NA")
# Clean dataset by subsetting columns
Stormdata <- select(Stormdata, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
# Clean exponents
exponent <- function(x) { switch(toupper(x), "K" = 10E3, "M" = 10E6, "B" = 10E9 , 1)}
Stormdata$PROPDMGEXP <- sapply(Stormdata$PROPDMGEXP, FUN="exponent")
Stormdata$CROPDMGEXP <- sapply(Stormdata$CROPDMGEXP, FUN="exponent")
mutate(Stormdata,PROPDMG = PROPDMG * PROPDMGEXP,CROPDMG = CROPDMG * CROPDMGEXP)
Stormdata <- select(Stormdata, -PROPDMGEXP, -CROPDMGEXP)
# Finish data processing by grouping by EVTYPE
Stormdata <- Stormdata %>% group_by(EVTYPE) %>% summarise_each(funs(sum))
# install required R.utils package to uncompress .bz2 file
if (!"R.utils" %in% installed.packages()) install.packages("R.utils")
# load needed libraries
library(R.utils)
library(dplyr)
library(ggplot2)
install.packages(c("chron", "curl", "dplyr", "gdata", "geosphere", "GlobalOptions", "httr", "KernSmooth", "manipulate", "migest", "plyr", "R6", "RCurl", "rmarkdown", "scales", "stringi"))
install.packages(c("boot", "chron", "class", "cluster", "curl", "dplyr", "foreign", "gdata", "geosphere", "GlobalOptions", "httr", "KernSmooth", "MASS", "migest", "nlme", "nnet", "plyr", "R6", "RCurl", "rmarkdown", "rpart", "scales", "spatial", "survival"), lib="C:/Program Files/R/R-3.1.3/library")
install.packages(c("boot", "chron", "class", "cluster", "curl",
))
install.packages("dplyr")
install.packages(c("boot", "chron", "class", "cluster", "curl", "dplyr", "foreign", "gdata", "geosphere", "GlobalOptions", "httr", "KernSmooth", "MASS", "migest", "nlme", "nnet", "plyr", "R6", "RCurl", "rmarkdown", "rpart", "scales", "spatial", "survival"), lib="C:/Program Files/R/R-3.1.3/library")
install.packages(c("boot", "chron", "class", "cluster", "curl",
"foreign"
))
install.packages("dplyr")
install.packages(c("boot", "chron", "class", "cluster", "curl", "dplyr", "foreign", "gdata", "geosphere", "GlobalOptions", "httr", "KernSmooth", "MASS", "migest", "nlme", "nnet", "plyr", "R6", "RCurl", "rmarkdown", "rpart", "scales", "spatial", "survival"), lib="C:/Program Files/R/R-3.1.3/library")
install.packages("stringi")
?funs
?summarise_each
library(dplyr)
?summarise_each
# Load data and transform to data.table
if(!exists("Stormdata"))
Stormdata <- read.csv("data/Stormdata.csv", header=TRUE, row.names=NULL,
stringsAsFactors=FALSE, na.strings = "NA")
# Clean dataset by subsetting columns
Stormdata <- select(Stormdata, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
# Clean exponents
exponent <- function(x) { switch(toupper(x), "K" = 10E3, "M" = 10E6, "B" = 10E9 , 1)}
Stormdata$PROPDMGEXP <- sapply(Stormdata$PROPDMGEXP, FUN="exponent")
Stormdata$CROPDMGEXP <- sapply(Stormdata$CROPDMGEXP, FUN="exponent")
mutate(Stormdata,PROPDMG = PROPDMG * PROPDMGEXP,CROPDMG = CROPDMG * CROPDMGEXP)
Stormdata <- select(Stormdata, -PROPDMGEXP, -CROPDMGEXP)
# Finish data processing by grouping by EVTYPE
Stormdata <- Stormdata %>% group_by(EVTYPE) %>% summarise_each(funs(sum,mean))
# Load data and transform to data.table
if(!exists("Stormdata"))
Stormdata <- read.csv("data/Stormdata.csv", header=TRUE, row.names=NULL,
stringsAsFactors=FALSE, na.strings = "NA")
# Clean dataset by subsetting columns
Stormdata <- select(Stormdata, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
# Clean exponents
exponent <- function(x) { switch(toupper(x), "K" = 10E3, "M" = 10E6, "B" = 10E9 , 1)}
Stormdata$PROPDMGEXP <- sapply(Stormdata$PROPDMGEXP, FUN="exponent")
Stormdata$CROPDMGEXP <- sapply(Stormdata$CROPDMGEXP, FUN="exponent")
mutate(Stormdata,PROPDMG = PROPDMG * PROPDMGEXP,CROPDMG = CROPDMG * CROPDMGEXP)
Stormdata <- select(Stormdata, -PROPDMGEXP, -CROPDMGEXP)
# Finish data processing by grouping by EVTYPE
Stormdata <- Stormdata %>% group_by(EVTYPE) %>% summarise_each(funs(sum,mean))
View(Stormdata)
g1 <- ggplot(data=evtypefatalities, aes(x=reorder(EVTYPE, FATALITIES), y=FATALITIES)) +
geom_bar(stat="identity") +
coord_flip() +
labs(title="# Fatalities by Event") +
ylab("") +
xlab("")
library(ggplot2)
library(ggplot2)
g1 <- ggplot(data=evtypefatalities, aes(x=reorder(EVTYPE, FATALITIES), y=FATALITIES)) +
geom_bar(stat="identity") +
coord_flip() +
labs(title="# Fatalities by Event") +
ylab("") +
xlab("")
g1 <- ggplot(data=Stormdata, aes(x=reorder(EVTYPE, FATALITIES_sum), y=FATALITIES_sum)) +
geom_bar(stat="identity") +
coord_flip() +
labs(title="# Fatalities by Event") +
ylab("") +
xlab("")
print(g1)
?reorder
?geom_bar
fatalities_sum <- Stormdata %>%select(EVTYPE,FATALITIES_sum) %>% arrange(desc(FATALITIES_sum))
View(fatalities_sum)
?top_n
top_n(fatalities_sum,10)
fatalities_sum <- Stormdata %>%select(EVTYPE,FATALITIES_sum) %>% arrange(desc(FATALITIES_sum)) %>% top_n(15)
fatalities_sum <- Stormdata %>%select(EVTYPE,FATALITIES_sum) %>% arrange(desc(FATALITIES_sum))
top_n(fatalities_sum,15)
fatalities_sum <- Stormdata %>%select(EVTYPE,FATALITIES_sum) %>% top_n(15)
View(fatalities_sum)
fatalities_sum <- Stormdata %>%select(EVTYPE,FATALITIES_sum) %>% arrange(desc(FATALITIES_sum)) %>% top_n(15)
View(fatalities_sum)
# For each measure, calculate top 15
fatalities_sum <- Stormdata %>%
select(EVTYPE,FATALITIES_sum) %>%
arrange(desc(FATALITIES_sum)) %>%
rename(FATALITIES_sum = Measure) %>%
top_n(15)
fatalities_sum$measure <- "Total"
fatalities_sum$type <- "Fatalities"
fatalities_mean <- Stormdata %>%
select(EVTYPE,FATALITIES_mean) %>%
arrange(desc(FATALITIES_mean)) %>%
rename(FATALITIES_mean = Measure) %>%
top_n(15)
fatalities_mean$measure <- "Average"
fatalities_mean$type <- "Fatalities"
injuries_sum <- Stormdata %>%
select(EVTYPE,INJURIES_sum) %>%
arrange(desc(INJURIES_sum)) %>%
rename(INJURIES_sum = Measure) %>%
top_n(15)
injuries_sum$measure <- "Total"
injuries_sum$type <- "Injuries"
injuries_mean <- Stormdata %>%
select(EVTYPE,INJURIES_mean) %>%
arrange(desc(INJURIES_mean)) %>%
rename(INJURIES_mean = Measure) %>%
top_n(15)
injuries_mean$measure <- "Average"
injuries_mean$type <- "Injuries"
healthevents <- rbind_list(fatalities_sum,fatalities_mean,injuries_sum,injuries_mean)
fatalities_sum <- Stormdata %>%
select(EVTYPE,FATALITIES_sum) %>%
arrange(desc(FATALITIES_sum)) %>%
rename(Measure = FATALITIES_sum) %>%
top_n(15)
# For each measure, calculate top 15
fatalities_sum <- Stormdata %>%
select(EVTYPE,FATALITIES_sum) %>%
arrange(desc(FATALITIES_sum)) %>%
rename(FATALITIES_sum) %>%
top_n(15)
fatalities_sum$measure <- "Total"
fatalities_sum$type <- "Fatalities"
fatalities_mean <- Stormdata %>%
select(EVTYPE,FATALITIES_mean) %>%
arrange(desc(FATALITIES_mean)) %>%
rename(Measure = FATALITIES_mean) %>%
top_n(15)
fatalities_mean$measure <- "Average"
fatalities_mean$type <- "Fatalities"
injuries_sum <- Stormdata %>%
select(EVTYPE,INJURIES_sum) %>%
arrange(desc(INJURIES_sum)) %>%
rename(Measure = INJURIES_sum) %>%
top_n(15)
injuries_sum$measure <- "Total"
injuries_sum$type <- "Injuries"
injuries_mean <- Stormdata %>%
select(EVTYPE,INJURIES_mean) %>%
arrange(desc(INJURIES_mean)) %>%
rename(Measure = INJURIES_mean) %>%
top_n(15)
injuries_mean$measure <- "Average"
injuries_mean$type <- "Injuries"
healthevents <- rbind_list(fatalities_sum,fatalities_mean,injuries_sum,injuries_mean)
View(healthevents)
g1 <- ggplot(data=healthevents, aes(x=EVTYPE, y=Measure)) +
geom_bar(stat="identity") +
coord_flip() +
labs(title="# Fatalities by Event") +
facet_grid(measure ~ type, scales = "free")
print(g1)
?grid.arrange
library(gridExtra)
?grid.arrange
g1 <- ggplot(data=fatalities_sum, aes(x=EVTYPE, y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Total Fatalities by Event")
g2 <- ggplot(data=fatalities_mean, aes(x=EVTYPE, y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Avg Fatalities by Event")
g3 <- ggplot(data=injuries_sum, aes(x=EVTYPE, y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Total Injuries by Event")
g4 <- ggplot(data=injuries_mean, aes(x=EVTYPE, y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Avg Injuries by Event")
grid.arrange(g1, g2, g3,g4,ncol=2,nrow=2)
grid.arrange(g1, g2, g3,g4,ncol=2,nrow=2) + xlab("")
g1 <- ggplot(data=fatalities_sum, aes(x=reorder(EVTYPE,Measure), y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Total Fatalities by Event") + xlab("") + ylab("")
g2 <- ggplot(data=fatalities_mean, aes(x=reorder(EVTYPE,Measure), y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Avg Fatalities by Event") + xlab("") + ylab("")
g3 <- ggplot(data=injuries_sum, aes(x=reorder(EVTYPE,Measure), y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Total Injuries by Event") + xlab("") + ylab("")
g4 <- ggplot(data=injuries_mean, aes(x=reorder(EVTYPE,Measure), y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Avg Injuries by Event") + xlab("") + ylab("")
grid.arrange(g1, g2, g3,g4,ncol=2,nrow=2)
# For each measure, calculate top 10
fatalities_sum <- Stormdata %>%
select(EVTYPE,FATALITIES_sum) %>%
arrange(desc(FATALITIES_sum)) %>%
rename(FATALITIES_sum) %>%
top_n(10)
fatalities_sum$measure <- "Total"
fatalities_sum$type <- "Fatalities"
fatalities_mean <- Stormdata %>%
select(EVTYPE,FATALITIES_mean) %>%
arrange(desc(FATALITIES_mean)) %>%
rename(Measure = FATALITIES_mean) %>%
top_n(10)
fatalities_mean$measure <- "Average"
fatalities_mean$type <- "Fatalities"
injuries_sum <- Stormdata %>%
select(EVTYPE,INJURIES_sum) %>%
arrange(desc(INJURIES_sum)) %>%
rename(Measure = INJURIES_sum) %>%
top_n(10)
injuries_sum$measure <- "Total"
injuries_sum$type <- "Injuries"
injuries_mean <- Stormdata %>%
select(EVTYPE,INJURIES_mean) %>%
arrange(desc(INJURIES_mean)) %>%
rename(Measure = INJURIES_mean) %>%
top_n(10)
injuries_mean$measure <- "Average"
injuries_mean$type <- "Injuries"
healthevents <- rbind_list(fatalities_sum,fatalities_mean,injuries_sum,injuries_mean)
g1 <- ggplot(data=fatalities_sum, aes(x=reorder(EVTYPE,Measure), y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Total Fatalities by Event") + xlab("") + ylab("")
g2 <- ggplot(data=fatalities_mean, aes(x=reorder(EVTYPE,Measure), y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Avg Fatalities by Event") + xlab("") + ylab("")
g3 <- ggplot(data=injuries_sum, aes(x=reorder(EVTYPE,Measure), y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Total Injuries by Event") + xlab("") + ylab("")
g4 <- ggplot(data=injuries_mean, aes(x=reorder(EVTYPE,Measure), y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Avg Injuries by Event") + xlab("") + ylab("")
grid.arrange(g1, g2, g3,g4,ncol=2,nrow=2)
grid.arrange(g1, g2, g3,g4,ncol=2,nrow=2)
# For each measure, calculate top 10
fatalities_sum <- Stormdata %>%
select(EVTYPE,FATALITIES_sum) %>%
arrange(desc(FATALITIES_sum)) %>%
rename(FATALITIES_sum) %>%
top_n(10)
fatalities_sum$measure <- "Total"
fatalities_sum$type <- "Fatalities"
fatalities_mean <- Stormdata %>%
select(EVTYPE,FATALITIES_mean) %>%
arrange(desc(FATALITIES_mean)) %>%
rename(Measure = FATALITIES_mean) %>%
top_n(10)
fatalities_mean$measure <- "Average"
fatalities_mean$type <- "Fatalities"
injuries_sum <- Stormdata %>%
select(EVTYPE,INJURIES_sum) %>%
arrange(desc(INJURIES_sum)) %>%
rename(Measure = INJURIES_sum) %>%
top_n(10)
injuries_sum$measure <- "Total"
injuries_sum$type <- "Injuries"
injuries_mean <- Stormdata %>%
select(EVTYPE,INJURIES_mean) %>%
arrange(desc(INJURIES_mean)) %>%
rename(Measure = INJURIES_mean) %>%
top_n(10)
injuries_mean$measure <- "Average"
injuries_mean$type <- "Injuries"
healthevents <- rbind_list(fatalities_sum,fatalities_mean,injuries_sum,injuries_mean)
# For each measure, calculate top 10
fatalities_sum <- Stormdata %>%
select(EVTYPE,FATALITIES_sum) %>%
arrange(desc(FATALITIES_sum)) %>%
rename(Measure = FATALITIES_sum) %>%
top_n(10)
fatalities_sum$measure <- "Total"
fatalities_sum$type <- "Fatalities"
fatalities_mean <- Stormdata %>%
select(EVTYPE,FATALITIES_mean) %>%
arrange(desc(FATALITIES_mean)) %>%
rename(Measure = FATALITIES_mean) %>%
top_n(10)
fatalities_mean$measure <- "Average"
fatalities_mean$type <- "Fatalities"
injuries_sum <- Stormdata %>%
select(EVTYPE,INJURIES_sum) %>%
arrange(desc(INJURIES_sum)) %>%
rename(Measure = INJURIES_sum) %>%
top_n(10)
injuries_sum$measure <- "Total"
injuries_sum$type <- "Injuries"
injuries_mean <- Stormdata %>%
select(EVTYPE,INJURIES_mean) %>%
arrange(desc(INJURIES_mean)) %>%
rename(Measure = INJURIES_mean) %>%
top_n(10)
injuries_mean$measure <- "Average"
injuries_mean$type <- "Injuries"
healthevents <- rbind_list(fatalities_sum,fatalities_mean,injuries_sum,injuries_mean)
?top_n
# For each measure, calculate top 10
fatalities_sum <- Stormdata %>%
select(EVTYPE,FATALITIES_sum) %>%
arrange(desc(FATALITIES_sum)) %>%
rename(Measure = FATALITIES_sum) %>%
top_n(10,Measure)
fatalities_sum$measure <- "Total"
fatalities_sum$type <- "Fatalities"
fatalities_mean <- Stormdata %>%
select(EVTYPE,FATALITIES_mean) %>%
arrange(desc(FATALITIES_mean)) %>%
rename(Measure = FATALITIES_mean) %>%
top_n(10,Measure)
fatalities_mean$measure <- "Average"
fatalities_mean$type <- "Fatalities"
injuries_sum <- Stormdata %>%
select(EVTYPE,INJURIES_sum) %>%
arrange(desc(INJURIES_sum)) %>%
rename(Measure = INJURIES_sum) %>%
top_n(10,Measure)
injuries_sum$measure <- "Total"
injuries_sum$type <- "Injuries"
injuries_mean <- Stormdata %>%
select(EVTYPE,INJURIES_mean) %>%
arrange(desc(INJURIES_mean)) %>%
rename(Measure = INJURIES_mean) %>%
top_n(10,Measure)
injuries_mean$measure <- "Average"
injuries_mean$type <- "Injuries"
healthevents <- rbind_list(fatalities_sum,fatalities_mean,injuries_sum,injuries_mean)
g1 <- ggplot(data=fatalities_sum, aes(x=reorder(EVTYPE,Measure), y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Total Fatalities by Event") + xlab("") + ylab("")
g2 <- ggplot(data=fatalities_mean, aes(x=reorder(EVTYPE,Measure), y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Avg Fatalities by Event") + xlab("") + ylab("")
g3 <- ggplot(data=injuries_sum, aes(x=reorder(EVTYPE,Measure), y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Total Injuries by Event") + xlab("") + ylab("")
g4 <- ggplot(data=injuries_mean, aes(x=reorder(EVTYPE,Measure), y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Avg Injuries by Event") + xlab("") + ylab("")
grid.arrange(g1, g2, g3,g4,ncol=2,nrow=2)
library(ggthemes)
library("ggthemes")
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
install.packages("ggthemes")
library("ggthemes")
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
(qplot(hp, mpg, data= subset(mtcars, cyl != 5), geom="point", color = factor(cyl))
+ geom_smooth(method = "lm", se = FALSE)
+ scale_color_fivethirtyeight()
+ theme_fivethirtyeight())
g1 <- ggplot(data=fatalities_sum, aes(x=reorder(EVTYPE,Measure), y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Total Fatalities by Event") + xlab("") + ylab("")+ theme_pander()
+ scale_fill_pander()
g2 <- ggplot(data=fatalities_mean, aes(x=reorder(EVTYPE,Measure), y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Avg Fatalities by Event") + xlab("") + ylab("")+ theme_pander()
+ scale_fill_pander()
g3 <- ggplot(data=injuries_sum, aes(x=reorder(EVTYPE,Measure), y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Total Injuries by Event") + xlab("") + ylab("")+ theme_pander()
+ scale_fill_pander()
g4 <- ggplot(data=injuries_mean, aes(x=reorder(EVTYPE,Measure), y=Measure)) + geom_bar(stat="identity") +
coord_flip() + labs(title="Avg Injuries by Event") + xlab("") + ylab("")+ theme_pander()
+ scale_fill_pander()
grid.arrange(g1, g2, g3,g4,ncol=2,nrow=2)
g1 <- ggplot(data=fatalities_sum, aes(x=reorder(EVTYPE,Measure), y=Measure)) +
geom_bar(stat="identity") +
coord_flip() + labs(title="Total Fatalities by Event") + xlab("") + ylab("")+scale_fill_gradient(
low = "red",
high = "yellow")
grid.arrange(g1, g2, g3,g4,ncol=2,nrow=2)
g1 <- ggplot(data=fatalities_sum, aes(x=reorder(EVTYPE,Measure), y=Measure)) +
geom_bar(stat="identity") +
coord_flip() + labs(title="Total Fatalities by Event") + xlab("") + ylab("")
+scale_fill_gradient(low = "red",high = "yellow")
g2 <- ggplot(data=fatalities_mean, aes(x=reorder(EVTYPE,Measure), y=Measure)) +
geom_bar(stat="identity") +
coord_flip() + labs(title="Avg Fatalities by Event") + xlab("") + ylab("")
g3 <- ggplot(data=injuries_sum, aes(x=reorder(EVTYPE,Measure), y=Measure)) +
geom_bar(stat="identity") +
coord_flip() + labs(title="Total Injuries by Event") + xlab("") + ylab("")
g4 <- ggplot(data=injuries_mean, aes(x=reorder(EVTYPE,Measure), y=Measure)) +
geom_bar(stat="identity") +
coord_flip() + labs(title="Avg Injuries by Event") + xlab("") + ylab("")
grid.arrange(g1, g2, g3,g4,ncol=2,nrow=2)
?scale_fill_gradient
g1 <- ggplot(data=fatalities_sum, aes(x=reorder(EVTYPE,Measure), y=Measure)) +
geom_bar(stat="identity") +
coord_flip() + labs(title="Total Fatalities by Event") + xlab("") + ylab("") +
scale_fill_gradient(low = "red",high = "yellow")
g2 <- ggplot(data=fatalities_mean, aes(x=reorder(EVTYPE,Measure), y=Measure)) +
geom_bar(stat="identity") +
coord_flip() + labs(title="Avg Fatalities by Event") + xlab("") + ylab("") +
scale_fill_gradient(low = "red",high = "yellow")
g3 <- ggplot(data=injuries_sum, aes(x=reorder(EVTYPE,Measure), y=Measure)) +
geom_bar(stat="identity") +
coord_flip() + labs(title="Total Injuries by Event") + xlab("") + ylab("")
g4 <- ggplot(data=injuries_mean, aes(x=reorder(EVTYPE,Measure), y=Measure)) +
geom_bar(stat="identity") +
coord_flip() + labs(title="Avg Injuries by Event") + xlab("") + ylab("")
grid.arrange(g1, g2, g3,g4,ncol=2,nrow=2)
g1 <- ggplot(data=fatalities_sum, aes(x=reorder(EVTYPE,Measure), y=Measure)) +
geom_bar(stat="identity") +
coord_flip() + labs(title="Total Fatalities by Event") + xlab("") + ylab("")
g2 <- ggplot(data=fatalities_mean, aes(x=reorder(EVTYPE,Measure), y=Measure)) +
geom_bar(stat="identity") +
coord_flip() + labs(title="Avg Fatalities by Event") + xlab("") + ylab("")
g3 <- ggplot(data=injuries_sum, aes(x=reorder(EVTYPE,Measure), y=Measure)) +
geom_bar(stat="identity") +
coord_flip() + labs(title="Total Injuries by Event") + xlab("") + ylab("")
g4 <- ggplot(data=injuries_mean, aes(x=reorder(EVTYPE,Measure), y=Measure)) +
geom_bar(stat="identity") +
coord_flip() + labs(title="Avg Injuries by Event") + xlab("") + ylab("")
grid.arrange(g1, g2, g3,g4,ncol=2,nrow=2)
